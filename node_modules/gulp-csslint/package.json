{
  "name": "gulp-csslint",
  "version": "0.2.0",
  "description": "CSSLint plugin for gulp",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "dependencies": {
    "csslint": "^0.10.0",
    "gulp-util": "^3.0.4",
    "rcloader": "^0.1.4",
    "through2": "^2.0.0"
  },
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.14",
    "jscs": "^1.13.1",
    "jshint": "^2.7.0",
    "mocha": "^2.2.5",
    "rimraf": "^2.3.4",
    "should": "^7.0.3",
    "sinon": "^1.15.4"
  },
  "scripts": {
    "clean": "rimraf coverage/",
    "lint": "jscs index.js test/ && jshint index.js test/",
    "pretest": "npm run lint",
    "test": "mocha",
    "precover": "npm run lint && npm run clean",
    "cover": "istanbul cover _mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lazd/gulp-csslint.git"
  },
  "keywords": [
    "gulpplugin",
    "csslint"
  ],
  "author": {
    "name": "Larry Davis",
    "email": "lazdnet@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lazd/gulp-csslint/issues"
  },
  "engines": {
    "node": ">=0.10"
  },
  "readme": "# gulp-csslint [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url] [![Dependency status][david-image]][david-url]\n> CSSLint plugin for gulp 3\n\n## Usage\n\nFirst, install `gulp-csslint` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-csslint\n```\n\nThen, add it to your `gulpfile.js`:\n\n```js\nvar csslint = require('gulp-csslint');\n\ngulp.task('css', function() {\n  gulp.src('client/css/*.css')\n    .pipe(csslint())\n    .pipe(csslint.reporter());\n});\n```\n\n## API\n\n### csslint(ruleConfiguration)\n\n#### ruleConfiguration\nType: `Object`\n\nIf you pass `lookup: false`, the local .csslintrc is not looked up automatically.\n\nYou can pass rule configuration as an object. See the [list of rules by ID on the CSSLint wiki](https://github.com/stubbornella/csslint/wiki/Rules-by-ID) for valid rule IDs.\n\nAny properties passed wil be in _addition_ to (or overwriting) the ones in .csslintrc (unless `lookup: false` is passed).\n\n```js\ngulp.src('client/css/*.css')\n  .pipe(csslint({\n    'shorthand': false\n  }))\n  .pipe(csslint.reporter());\n```\n\n### csslint(csslintrc)\n\n#### csslintrc\nType: `String`\n\nYou can also pass the path to your csslintrc file instead of a rule configuration object.\n\n```js\ngulp.src('client/css/*.css')\n  .pipe(csslint('csslintrc.json'))\n  .pipe(csslint.reporter());\n```\n\n## Results\n\nAdds the following properties to the file object:\n\n```js\nfile.csslint.success = true; // or false\nfile.csslint.errorCount = 0; // number of errors returned by CSSLint\nfile.csslint.results = []; // CSSLint errors\nfile.csslint.opt = {}; // The options you passed to CSSLint\n```\n\n## Using reporters\n\nSeveral reporters come built-in to css-lint. To use one of these reporters, pass the name to `csslint.reporter`.\n\nFor a list of all reporters supported by `csslint`, see the [csslint wiki](https://github.com/CSSLint/csslint/wiki/Command-line-interface#--format).\n\n```js\ngulp.task('lint', function() {\n  gulp.files('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.reporter('junit-xml'));\n```\n\n### Custom reporters\n\nCustom reporter functions can be passed as `csslint.reporter(reporterFunc)`. The reporter function will be called for each linted file and passed the file object as described above.\n\n```js\nvar csslint = require('gulp-csslint');\nvar gutil = require('gulp-util');\n\nvar customReporter = function(file) {\n  gutil.log(gutil.colors.cyan(file.csslint.errorCount)+' errors in '+gutil.colors.magenta(file.path));\n\n  file.csslint.results.forEach(function(result) {\n    gutil.log(result.error.message+' on line '+result.error.line);\n  });\n};\n\ngulp.task('lint', function() {\n  gulp.files('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.reporter(customReporter));\n});\n```\n\n## Custom rules\n\nUse the `csslint.addRule(rule)` method to define custom rules that run in addition to the rules defined in the csslintrc file. See [Working with Rules](https://github.com/CSSLint/csslint/wiki/Working-with-Rules) for details.\n\n```js\nvar csslint = require('gulp-csslint');\n\ncsslint.addRule({\n\t// rule information\n});\n\ngulp.task('lint', function() {\n  gulp.files('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.reporter())\n});\n```\n\n## Fail on errors\n\nPipe the file stream to `csslint.failReporter()` to fail on errors.\n\n```js\nvar csslint = require('gulp-csslint');\n\ngulp.task('lint', function() {\n  gulp.files('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.reporter()) // Display errors\n    .pipe(csslint.reporter('fail')); // Fail on error (or csslint.failReporter())\n});\n```\n\n\n[travis-url]: http://travis-ci.org/lazd/gulp-csslint\n[travis-image]: https://img.shields.io/travis/lazd/gulp-csslint.svg\n[npm-url]: https://npmjs.org/package/gulp-csslint\n[npm-image]: https://img.shields.io/npm/v/gulp-csslint.svg\n[david-url]: https://david-dm.org/lazd/gulp-csslint\n[david-image]: https://img.shields.io/david/lazd/gulp-csslint.svg\n[coveralls-url]: https://coveralls.io/r/lazd/gulp-csslint\n[coveralls-image]: https://img.shields.io/coveralls/lazd/gulp-csslint.svg\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/lazd/gulp-csslint",
  "_id": "gulp-csslint@0.2.0",
  "dist": {
    "shasum": "aa5e6cad8bf22158f8b2ab3062d56714bca1e554"
  },
  "_from": "gulp-csslint@",
  "_resolved": "https://registry.npmjs.org/gulp-csslint/-/gulp-csslint-0.2.0.tgz"
}
